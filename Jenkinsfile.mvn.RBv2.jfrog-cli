node {
    JF_RT_URL="https://psazuse.jfrog.io"
    JFROG_NAME="psazuse"
    
    // https://github.com/krishnamanchikalapudi/spring-petclinic
    // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli
    projectName="spring-petclinic-rbv2" 
    JF_CLI_LOG_LEVEL='DEBUG'
    def BUILD_TS = sh(script: "date +%Y-%m-%d-%H-%M", returnStdout: true).trim()

    stage('PACKAGE') { 
        stage('init') {
            stage('jf.ver') {
                sh """ #!/bin/bash
                    jf -v
                """ 
            } // stage: jf.ver
            stage('rt.config') {
                // jenkins secrets: https://www.jenkins.io/doc/book/using/using-credentials/
                // JFrog CLI config
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                    sh """ #!/bin/bash
                        jf config add ${JFROG_NAME} --artifactory-url=${JF_RT_URL}/artifactory --xray-url=${JF_RT_URL}/xray --user=${JFROG_RT_USER} --password=${JFROG_RT_PWD} --interactive=false --overwrite    
                    """
                } // withCredentials: JFROG_ARTIFACTORY
            } // stage: rt.config
            stage('rt.ping') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'
                    jf rt ping
                """
            } // stage: rt.ping
            stage('config.show') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'
                    echo "\n"
                    jf config show
                """
            } // stage: config.show
        } // stage: init
        stage('clone') {
            git branch: 'main', url: 'https://github.com/krishnamanchikalapudi/spring-petclinic.git'
        } // stage: clone
        stage('mvn config') {
            repoPath="krishnam-mvn"
            sh """ #!/bin/bash  
                export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'
                jf mvnc --server-id-resolve ${JFROG_NAME} --server-id-deploy ${JFROG_NAME} --repo-resolve-releases ${repoPath}-virtual --repo-resolve-snapshots ${repoPath}-virtual --repo-deploy-releases ${repoPath}-local --repo-deploy-snapshots ${repoPath}-dev-local
            """
        } // stage: mvnc
        stage('env vars') {
            sh """ #!/bin/bash 
                export PACKAGE_CATEGORY='WebApp'
            """
        } // stage: env vars
        stage('audit') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'

                jf audit --mvn --extended-table=true --format=simple-json
            """
        }
        stage('build') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'

                jf mvn clean install -DskipTests=true --scan=true --build-name=${projectName} --build-number=${env.BUILD_ID} --detailed-summary=true 
            """
        } // stage: compile
        stage('scan') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL='${JF_CLI_LOG_LEVEL}'

                jf scan . --extended-table=true --format=simple-json
            """
        }
    } // stage: package
    stage('BUILD INFO') {
        // SBOM INFO: 
        //     US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
        //     US Cyber Defence Agency: https://www.cisa.gov/sbom
        //     NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1

        stage('collect env') {
            sh """ #!/bin/bash
                jf rt bce ${projectName} ${env.BUILD_ID} 
            """
        } // stage: collect env
        stage('vcs info') {
            sh """ #!/bin/bash
                jf rt bag ${projectName} ${env.BUILD_ID} 
            """
        } // stage: vcs info
        stage('build publish') {
            sh """ #!/bin/bash
                jf rt bp ${projectName} ${env.BUILD_ID} --detailed-summary=true
            """
        } // stage: build publish
        stage('build scan') {
            try {
                sh """ #!/bin/bash
                    jf bs ${projectName} ${env.BUILD_ID} --rescan=true  --extended-table=true --vuln=true --fail=false
                """
            } catch (err) {
            } // try-catch
        }
    } // stage: Build Info
    stage('RELEASE BUNDLE v2') {
        stage('spec') {
            sh """ #!/bin/bash
                echo "{\"builds\": [{\"name\": \"${projectName}\", \"number\": \"${env.BUILD_ID}\"}]}" > build-spec-${env.BUILD_ID}.json

                cat build-spec-${env.BUILD_ID}.json
            """
        } // stage: spec
        stage('RBv2:NEW') {
             withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    echo "build ts: ${BUILD_TS}"

                    jf rbc --spec="build-spec-${env.BUILD_ID}.json" --sync=true --url="${JF_RT_URL}" --signing-key="${JFROG_RT_USER}" --spec-vars="build_name=${projectName};build_id=${env.BUILD_ID};build_data=${BUILD_TS}" ${projectName}-bundle ${env.BUILD_ID}
                """
             } // withCredentials: JFROG_ARTIFACTORY_CLI
        } // stage: RBv2:NEW
    } // stage: RB v2
} // node