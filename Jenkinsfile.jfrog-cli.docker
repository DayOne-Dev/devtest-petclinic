node {
    JFROG_NAME="psazuse"
    JF_RT_HOST="${JFROG_NAME}.jfrog.io"
    JF_RT_URL="https://${JF_RT_HOST}"
    
    // https://github.com/krishnamanchikalapudi/spring-petclinic
    // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli
    projectName="spring-petclinic-docker" 
    JF_CLI_LOG_LEVEL='DEBUG' 
    PACKAGE_CATEGORY='WebApp'
    RT_REPO_MVN="krishnam-mvn"
    RT_REPO_DOCKER="krishnam-docker"

    JFROG_CLI_OUTPUT_DIR="${WORKSPACE}/cli/"
    DKR_MANIFEST="${WORKSPACE}/list.manifest-${env.BUILD_ID}.json"
    SPEC_BP_DOCKER="dockerimage-file-details-${env.BUILD_ID}"
    SPEC_BP="${WORKSPACE}/bp-spec-${env.BUILD_ID}.json"
    SPEC_RBv2="${WORKSPACE}/rb2-spec-${env.BUILD_ID}.json"

    def BUILD_TS = sh(script: "date +%Y-%m-%d-%H-%M", returnStdout: true).trim()

    stage('PACKAGE') { 
        stage('init') {
            stage('jf.ver') {
                sh """ #!/bin/bash
                    jf -v
                    java -version
                    mvn -v
                    docker -v
                """ 
            } // stage: jf.ver
            stage('jf.vars') {
                sh """ #!/bin/bash
                    export JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR="${JFROG_CLI_OUTPUT_DIR}"
                    export PACKAGE_CATEGORY="${PACKAGE_CATEGORY}"
                """ 
            } // stage: jf.ver
            stage('rt.config') {
                // jenkins secrets: https://www.jenkins.io/doc/book/using/using-credentials/
                // JFrog CLI config
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                    sh """ #!/bin/bash
                        jf config add ${JFROG_NAME} --artifactory-url=${JF_RT_URL}/artifactory --xray-url=${JF_RT_URL}/xray --user=${JFROG_RT_USER} --password=${JFROG_RT_PWD} --interactive=false --overwrite    
                    """
                } // withCredentials: JFROG_ARTIFACTORY
            } // stage: rt.config
            stage('rt.ping') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    jf rt ping
                """
            } // stage: rt.ping
            stage('config.show') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    echo "\n"
                    jf config show
                """
            } // stage: config.show
        } // stage: init
        stage('clone') {
            git branch: 'main', url: 'https://github.com/krishnamanchikalapudi/spring-petclinic.git'
        } // stage: clone
        stage('MAVEN') {
            stage('mvn config') {
                sh """ #!/bin/bash  
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    jf mvnc --server-id-resolve ${JFROG_NAME} --server-id-deploy ${JFROG_NAME} --repo-resolve-releases ${RT_REPO_MVN}-virtual --repo-resolve-snapshots ${RT_REPO_MVN}-virtual --repo-deploy-releases ${RT_REPO_MVN}-local --repo-deploy-snapshots ${RT_REPO_MVN}-dev-local
                """
            } // stage: mvnc
            stage('env vars') {
                sh """ #!/bin/bash 
                    export PACKAGE_CATEGORY="${PACKAGE_CATEGORY}"
                """
            } // stage: env vars
            stage('audit') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf audit --mvn --extended-table=true --format=simple-json
                """
            } // stage: audit
            stage('build') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf mvn clean install -DskipTests=true --build-name=${projectName} --build-number=${env.BUILD_ID} --detailed-summary=true 
                """
            } // stage: build
            stage('scan') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf scan . --extended-table=true --format=simple-json
                """
            } // stage: scan
        } // stage: MAVEN
        stage('Docker') {
            stage('config') {
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                    sh """ #!/bin/bash
                        export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                        docker login ${JF_RT_HOST} -u ${JFROG_RT_USER} -p ${JFROG_RT_PWD}
                    """
                } // withCredentials
            } // stage: config
            stage('image') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    docker image build -f Dockerfile-cli --platform linux/amd64,linux/arm64 -t ${JF_RT_HOST}/${RT_REPO_DOCKER}-virtual/${projectName}:${env.BUILD_ID} --output=type=image .
                """
            } // stage: image
            stage('inspect') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    docker inspect ${JF_RT_HOST}/${RT_REPO_DOCKER}-virtual/${projectName}:${env.BUILD_ID} --format='{{.Id}}'
                """
            } // stage: inspect
            stage('push') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf docker push ${JF_RT_HOST}/${RT_REPO_DOCKER}-virtual/${projectName}:${env.BUILD_ID} --build-name=${projectName} --build-number=${env.BUILD_ID} --detailed-summary=true
                """
            } // stage: push
            stage('scan') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf docker scan ${JF_RT_HOST}/${RT_REPO_DOCKER}-virtual/${projectName}:${env.BUILD_ID} --vuln
                """
            } // stage: scan 
        } // stage: docker
    } // stage: package
    stage('BUILD INFO') {
        stage('collect env') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bce ${projectName} ${env.BUILD_ID} 
            """
        } // stage: collect env
        stage('vcs info') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bag ${projectName} ${env.BUILD_ID} 
            """
        } // stage: vcs info
        stage('build:create') { 
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    jf rt curl -XGET "/api/storage/${RT_REPO_DOCKER}-virtual/${projectName}/${env.BUILD_ID}/list.manifest.json" -H "Authorization: Bearer ${JF_ACCESS_TOKEN}" -o "${DKR_MANIFEST}"
                    # jf rt curl -XGET "/api/storage/krishnam-docker-virtual/spring-petclinic/cmd.2024-09-11-13-56/list.manifest.json" -H "Authorization: Bearer ${JF_ACCESS_TOKEN}" -o "${DKR_MANIFEST}"
                """
            } // withCredentials
            imageSha256=sh(returnStdout: true, script: "cat ${DKR_MANIFEST} | jq -r '.originalChecksums.sha256'").trim()
            sh """
                echo ${imageSha256}

                echo ${JF_RT_HOST}/${RT_REPO_DOCKER}-virtual/${projectName}:${env.BUILD_ID}@sha256:${imageSha256} > ${SPEC_BP_DOCKER}

                cat ${SPEC_BP_DOCKER}

                jf rt bdc ${RT_REPO_DOCKER}-virtual --image-file ${SPEC_BP_DOCKER} --build-name ${projectName} --build-number ${env.BUILD_ID} 
            """

        } // stage: build create
        stage('build:publish') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bp ${projectName} ${env.BUILD_ID} --detailed-summary=true
            """
        } // stage: build publish
        stage('build:scan') { 
            try {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                jf bs ${projectName} ${env.BUILD_ID} --rescan=true --format=table --extended-table=true --vuln=true --fail=false
            """
            } catch (err) {
            }
        } // stage: build scan
    } // stage: BUILD INFO
    stage('RELEASE BUNDLE v2') {
        // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/release-lifecycle-management
        stage('spec') {
            // { "files": [ {"build": "spring-petclinic-rbv2/cmd.2024-08-30-17-01", "includeDeps": "false" } ] }
            // { "files": [ {"build": "build_name/build_number"} ] }
            script {
                def rb2info=  [
                'build' : "${projectName}/${env.BUILD_ID}",
                'includeDeps' : "false"
                ]
                def json = new groovy.json.JsonBuilder()
                json "files": [ rb2info ]
                def file = new File("${SPEC_RBv2}")
                file.write(groovy.json.JsonOutput.prettyPrint(json.toString()))
            }
            sh """ #!/bin/bash
                cat ${SPEC_RBv2}
            """
        } // stage: spec
         stage('RBv2:NEW') {
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf rbc --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --spec="${SPEC_RBv2}" --spec-vars="build_name=${projectName};build_id=${env.BUILD_ID};PACKAGE_CATEGORY=${PACKAGE_CATEGORY};state=new2dev" --server-id="${JFROG_NAME}" ${projectName} ${env.BUILD_ID}
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:NEW
        stage('RBv2:DEV') {
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --server-id="psazuse" ${projectName} ${env.BUILD_ID} DEV 
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:DEV
        stage('RBv2:QA') {
            // jf rt dpr ${projectName} ${RT_REPO_DOCKER}-dev-local ${RT_REPO_DOCKER}-qa-local 
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    
                    jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --server-id="psazuse" ${projectName} ${env.BUILD_ID} QA 
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:PROD
        
    } // stage: RELEASE BUNDLE v2
    
    stage('cleanup') {
        sh """ #!/bin/bash
            rm -rf $DKR_MANIFEST
            rm -rf $SPEC_BP_DOCKER
            rm -rf $SPEC_BP
            rm -rf $SPEC_RBv2

            docker image prune -a --force --filter "until=24h"
            docker system prune -a --force --filter "until=24h"
        """
    } // stage: cleanup
} // node