name: JF-CLI with Docker
on:
# TURN-OFF on every push 
  push:
    branches: 
      - nobuildonpush
    paths-ignore:   # When the below folders are checked-in, the GitHub Actions job will not start.
      - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
     types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
env:
  BUILD_NAME: 'spring-petclinic-ga-docker'
  BUILD_ID: ${{ github.run_number }} # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
  JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
  RBv2_SIGNING_KEY: ${{ vars.RBV2_SIGNING_KEY }}
  RT_MVN_REPO_VIRTUAL: 'krishnam-mvn-virtual'
  RT_DOCKER_REPO_VIRTUAL: 'krishnam-docker-virtual'
  PACKAGE_CATEGORY: ${{vars.PACKAGE_CATEGORY}}

jobs:
   prestep:
    name: PreStep
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      # REPO INFO
      # JFROG_NAME: ${{ secrets.JF_NAME }}
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: 'DEBUG'
    runs-on: ${{ matrix.os }}
    outputs:
      output1: ${{ steps.setup-cli.outputs.test }}
      output2: ${{ steps.setup-java.outputs.test }}
      output3: ${{ steps.config-mvn.outputs.test }}
      output4: ${{steps.config-docker.outputs.tests}}
    steps:
      - name: Ubuntu software version
        run: |
          # Ubuntu version
          cat /etc/os-release
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}
      
      - name: Show configs
        run: |
          # jf config
          jf config show >> $GITHUB_STEP_SUMMARY
          
      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        id: setup-java
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17

      - name: Config jf with mvn repos
        id: config-mvn
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          jf mvnc --repo-resolve-releases ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-deploy-releases ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-deploy-snapshots ${{ env.RT_MVN_REPO_VIRTUAL}}
          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic
          pwd
      - name: Docker authentication  # ref https://github.com/marketplace/actions/docker-login
        id: config-docker
        uses: docker/login-action@v3
        with: 
          registry: ${{env.JF_RT_URL}}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
      - name: Software versions
        run: |
          # JFrog CLI version
          jf --version >> $GITHUB_STEP_SUMMARY
          # Ping the server
          jf rt ping >> $GITHUB_STEP_SUMMARY
          # Java
          java -version >> $GITHUB_STEP_SUMMARY
          # MVN
          mvn -version >> $GITHUB_STEP_SUMMARY
          # Docker
          docker -v >> $GITHUB_STEP_SUMMARY
          # Python
          python3 -V >> $GITHUB_STEP_SUMMARY
          pip3 -V >> $GITHUB_STEP_SUMMARY
          # JF Docker 
          jf docker --version >> $GITHUB_STEP_SUMMARY
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4 # ref: https://github.com/actions/upload-artifact
        with:
          name: myimage-to-reuse
          path: /tmp/myimage-to-reuse.tar

   package:
    name: Package
    needs: 
      - prestep 
    runs-on: ubuntu-latest

    steps:
      - name: load prestep saved image myimage-to-reuse
        uses: actions/download-artifact@v4  # ref: https://github.com/marketplace/actions/download-a-build-artifact
        with:
          name: myimage-to-reuse
      - run: docker load -i /tmp/myimage-to-reuse.tar
      - run: docker run -it myimage-to-reuse

      - name: Clone VCS
        uses: actions/checkout@v4     # ref: https://github.com/actions/checkout

      - name: JF config
        run: jf config show

      - name: Xray Audit  # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-source-code
        run: |
          cd /home/runner/work/spring-petclinic/spring-petclinic

          jf audit --mvn=true --format=table --extended-table=true --secrets=true --sast=true --sca=true --licenses=true --fail=false

      - name: Create Build
        run: jf mvn clean install -DskipTests=true --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_ID}} --detailed-summary=true 

      - name: Xray Scan
        run: jf scan . --extended-table=true >> $GITHUB_STEP_SUMMARY
      
      - name: Docker image
        run: docker image build -f Dockerfile-cli --platform linux/amd64,linux/arm64 -t ${{env.JF_RT_URL}}/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}} --output=type=image .

      - name: Docker inspect
        run: docker inspect ${{env.JF_RT_URL}}/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}} --format='{{.Id}}'

      - name: Docker push
        run: jf docker push ${{env.JF_RT_URL}}/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}}
      
      - name: Xray Docker scan
        run: jf docker scan ${{env.JF_RT_URL}}/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}} >> $GITHUB_STEP_SUMMARY

      - name: set build vars
        run: export PACKAGE_CATEGORY="${{env.PACKAGE_CATEGORY}}"

   buildinfo:
    name: Build Info
    runs-on: ubuntu-latest
    # US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
    # US Cyber Defence Agency: https://www.cisa.gov/sbom
    #  NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
    needs: 
      - package 
    steps:
      - name: Collect env
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: Add VCS info
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: Docker build create
        run: |
          jf rt curl -XGET "/api/storage/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}}/list.manifest.json" -H "Authorization: Bearer ${{ steps.setup-cli.outputs.oidc-token }}" -o "listmanifest-${{ env.BUILD_ID}}.json"

          imageSha256=`cat "listmanifest-${{ env.BUILD_ID}}.json" | jq -r '.originalChecksums.sha256'`
          echo ${imageSha256}

          echo ${{env.JF_RT_URL}}/${{env.RT_DOCKER_REPO_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}}@sha256:${imageSha256} > "dockerimage-file-details-${{env.BUILD_ID}}"
          cat "dockerimage-file-details-${{env.BUILD_ID}}"

          jf rt bdc ${{env.RT_DOCKER_REPO_VIRTUAL}} --image-file "dockerimage-file-details-${{env.BUILD_ID}}" --build-name ${{ env.BUILD_NAME }} --build-number ${{ env.BUILD_ID}}

      - name: Build Publish
        run: |
          jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true >> $GITHUB_STEP_SUMMARY

   releasebundlev2:
    name: Release Bundle v2
    runs-on: ubuntu-latest
    needs: 
      - buildinfo 
    steps:
      - name: RBv2 spec - create
        run: |
          echo "{ \"files\": [ {\"build\": \"${{ env.BUILD_NAME}}/${{ env.BUILD_ID }}\" } ] }"  > RBv2-SPEC-${{ env.BUILD_ID }}.json
      - name: RBv2 spec - print
        run: cat RBv2-SPEC-${{ env.BUILD_ID }}.json
      - name: RBv2 Create NEW
        run: |
          jf rbc ${{ env.BUILD_NAME}} ${{ env.BUILD_ID }} --sync="true" --signing-key=${{env.RBv2_SIGNING_KEY}} --spec=RBv2-SPEC-${{ env.BUILD_ID }}.json >> $GITHUB_STEP_SUMMARY
      - name: RBv2 promote DEV
        run: |
          jf rbp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID }} DEV --sync="true" --signing-key=${{env.RBv2_SIGNING_KEY}}  >> $GITHUB_STEP_SUMMARY
      - name: RBv2 promote QA
        run: |
          jf rbp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID }} QA --sync="true" --signing-key=${{env.RBv2_SIGNING_KEY}} >> $GITHUB_STEP_SUMMARY


    ##### DONOT DELETE BELOW CODE ##### 
   analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    # runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    runs-on: ubuntu-latest
    needs: 
      - releasebundlev2 
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: none # This mode only analyzes Java. Set this to 'autobuild' or 'manual' to analyze Kotlin too.
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
