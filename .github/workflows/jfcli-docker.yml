name: JF-CLI with Docker
on:
# TURN-OFF on every push 
  push:
    branches: 
      - main
    paths-ignore:   # When the below folders are checked-in, the GitHub Actions job will not start.
      - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
     types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
   prestep:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      # REPO INFO
      # JFROG_NAME: ${{ secrets.JF_NAME }}
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      JF_DOCKER_USER: ${{ vars.JF_DOCKER_USER }}
      JF_DOCKER_USERPWD: ${{ vars.JF_DOCKER_USERPWD }}
      RBv2_SIGNING_KEY: ${{ vars.RBV2_SIGNING_KEY }}
      #JF_OIDC_PROVIDER_NAME: ${{ vars.JF_OIDC_PROVIDER_NAME }}
      RT_MVN_REPO_VIRTUAL: 'krishnam-mvn-virtual'
      RT_DOCKER_REPO_VIRTUAL: 'krishnam-docker-virtual'
      # RT_PROJECT_REPO_LOCAL: 'krishnam-mvn-dev-local'
      PACKAGE_CATEGORY: ${{vars.PACKAGE_CATEGORY}}
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: 'DEBUG'
      BUILD_NAME: 'spring-petclinic-ga-docker'
      BUILD_ID: ${{ github.run_number }} # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ubuntu software version
        run: |
          # Ubuntu version
          cat /etc/os-release
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_MVN_REPO_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}
      - run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
      - name: Show configs
        run: |
          # jf config
          jf config show
          # docker config cat ~/.config/docker/daemon.json 
      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'
      - name: Config jf with mvn repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          jf mvnc --repo-resolve-releases ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-deploy-releases ${{ env.RT_MVN_REPO_VIRTUAL}} --repo-deploy-snapshots ${{ env.RT_MVN_REPO_VIRTUAL}}
          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic
          pwd
  
   package:
    runs-on: ${{ matrix.os }}
    needs: 
      - prestep 
    steps:
      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

    ##### DONOT DELETE BELOW CODE ##### 
   analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: none # This mode only analyzes Java. Set this to 'autobuild' or 'manual' to analyze Kotlin too.
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
