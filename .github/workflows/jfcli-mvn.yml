# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JF-CLI with Maven

on:
# TURN-OFF on every push 
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [ '17' ]
    env:
          MVN_REPO: 'krishnam-virtual'
          # JFROG_NAME: ${{ secrets.JF_NAME }}
          JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
          JF_NAME: ${{ vars.JF_NAME }}
          JF_HOST: ${{ vars.JF_NAME }}.jfrog.io
          RBv2_SIGNING_KEY: ${{ vars.RBV2_SIGNING_KEY }}
          JF_GIT_TOKEN: ${{ vars.GITHUB_TOKEN }}
          JF_ACCESS_TOKEN: ${{ vars.RBV2_SIGNING_KEY }}
          #JF_OIDC_PROVIDER_NAME: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          RT_PROJECT_REPO_VIRTUAL: 'krishnam-mvn-virtual'
          RT_PROJECT_REPO_LOCAL: 'krishnam-mvn-dev-local'
          PACKAGE_CATEGORY: 'WebApp'
          JOB_SUMMARY: false
          JFROG_CLI_LOG_LEVEL: 'DEBUG'
          BUILD_NAME: 'spring-petclinic-ga'
          BUILD_ID: ${{ github.run_number }} # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}
      - run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show
      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout
      - name: Config jf with mvn repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}

          jf mvnc --repo-resolve-releases ${{ env.RT_PROJECT_REPO_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_PROJECT_REPO_VIRTUAL}} --repo-deploy-releases ${{ env.RT_PROJECT_REPO_LOCAL}} --repo-deploy-snapshots ${{ env.RT_PROJECT_REPO_LOCAL}}

          export JFROG_CLI_RELEASES_REPO="https://psazuse.jfrog.io/artifactory/${{ env.RT_PROJECT_REPO_VIRTUAL}}" 
          export JFROG_CLI_EXTRACTORS_REMOTE="https://psazuse.jfrog.io/artifactory/${{ env.RT_PROJECT_REPO_VIRTUAL}}"

          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic

          pwd

      - name: Xray Audit  # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-source-code
        run: |
          cd /home/runner/work/spring-petclinic/spring-petclinic

          jf audit --mvn=true --format=table --extended-table=true --secrets=true --sast=true --sca=true --licenses=true --fail=false

      - name: Create Build
        run: jf mvn clean install -DskipTests=true --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} --detailed-summary=true 

  ## DO NOT MODIFY BELOW CODE - for Advanced code scanning. ref: https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java-kotlin # ref: https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java-kotlin"