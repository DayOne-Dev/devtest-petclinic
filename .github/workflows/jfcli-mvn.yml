# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JF-CLI with Maven
on:
# TURN-OFF on every push 
  push:
    branches: 
      - main
    paths-ignore:
      - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      # REPO INFO
      MVN_REPO: 'krishnam-virtual'
      # JFROG_NAME: ${{ secrets.JF_NAME }}
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      JF_NAME: ${{ vars.JF_NAME }}
      JF_HOST: ${{ vars.JF_NAME }}.jfrog.io
      RBv2_SIGNING_KEY: ${{ vars.RBV2_SIGNING_KEY }}
      JF_GIT_TOKEN: ${{ vars.GITHUB_TOKEN }}
      JF_ACCESS_TOKEN: ${{ vars.RBV2_SIGNING_KEY }}
      #JF_OIDC_PROVIDER_NAME: ${{ vars.JF_OIDC_PROVIDER_NAME }}
      RT_PROJECT_REPO_VIRTUAL: 'krishnam-mvn-virtual'
      RT_PROJECT_REPO_LOCAL: 'krishnam-mvn-dev-local'
      PACKAGE_CATEGORY: 'WebApp'
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: 'DEBUG'
      BUILD_NAME: 'spring-petclinic-ga'
      BUILD_ID: ${{ github.run_number }} # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_PROJECT_REPO_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_PROJECT_REPO_VIRTUAL}}'
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}
      - run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show
      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Config jf with mvn repos
        run: |
          java -version

          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}

          jf mvnc --repo-resolve-releases ${{ env.RT_PROJECT_REPO_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_PROJECT_REPO_VIRTUAL}} --repo-deploy-releases ${{ env.RT_PROJECT_REPO_LOCAL}} --repo-deploy-snapshots ${{ env.RT_PROJECT_REPO_LOCAL}}

          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic

          pwd
# Package
      - name: Xray Audit  # ref: https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-source-code
        run: |
          cd /home/runner/work/spring-petclinic/spring-petclinic

          jf audit --mvn=true --format=table --extended-table=true --secrets=true --sast=true --sca=true --licenses=true --fail=false

      - name: Create Build
        run: jf mvn clean install -DskipTests=true --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} --detailed-summary=true 

      - name: Xray Scan
        run: jf scan . --extended-table=true --format=simple-json
 # Build Info
      - name: Collect env
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: Add VCS info
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: Build Publish
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true

#      - name: Build Scan
#        run: jf bs ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --rescan=true --format=table --extended-table=true --vuln=true --fail=false 

# Release Bundle v2


  ## DO NOT MODIFY BELOW CODE - for Advanced code scanning. ref: https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages#using-multiple-build-modes-in-a-multi-language-repository
      # - name: Initialize CodeQL to analyze ${{ matrix.language }}
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: ${{ matrix.language }}
      # - if: ${{ matrix.build-mode == 'manual' }}
      #   name: Build C and C++ code
      #   run: |
      #     echo 'If you are using a "manual" build mode for one or more of the' \
      #       'languages you are analyzing, replace this with the commands to build' \
      #       'your code, for example:'
      #     echo '  make bootstrap'
      #     echo '  make release'
      #     exit 1
      # - name: Perform CodeQL Analysis 
      #   uses: github/codeql-action/analyze@v3
      #   with:
      #     category: "/language:${{ matrix.language }}"
          

