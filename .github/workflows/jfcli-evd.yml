# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: "JF-CLI: Evidence"
on:
# TURN-OFF on every push 
  push:
    branches: 
    #  - nobuildonpush
      - main
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
  pull_request:
    branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  mvnPackage:
    name: MVN
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none 
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      RT_REPO_MVN_VIRTUAL: "krishnam-mvn-virtual"
      RT_REPO_DOCKER_VIRTUAL: "krishnam-docker-virtual"
      DOCKER_BUILDX_PLATFORMS: 'linux/amd64,linux/arm64'
      DOCKER_METADATA_JSON: 'build-metadata.json'
      EVD_PACKAGE_JSON: 'evd-package.json'
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: DEBUG # DEBUG, INFO, WARN, ERROR
      BUILD_NAME: "spring-petclinic"
      JAR_FINAL_NAME: "mvn-spring-petclinic"
      BUILD_ID: "ga-mvn-km${{ github.run_number }}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_MVN_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: latest  #2.71.0
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with mvn repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          export JFROG_CLI_LOG_TIMESTAMP=DATE_AND_TIME

          jf mvnc --global --repo-resolve-releases ${{ env.RT_REPO_MVN_VIRTUAL}} --repo-resolve-snapshots ${{ env.RT_REPO_MVN_VIRTUAL}}

      - name: Create ENV variables
        run: |
          echo "RT_REPO_DOCKER_URL=${{ vars.JF_NAME }}.jfrog.io/${{env.RT_REPO_DOCKER_VIRTUAL}}/${{ env.BUILD_NAME }}:${{ env.BUILD_ID}}" >> $GITHUB_ENV
          echo "RBv2_SPEC_JSON=RBv2-SPEC-${{ env.BUILD_ID }}.json" >> $GITHUB_ENV

      - name: Docker authentication  # ref https://github.com/marketplace/actions/docker-login
        id: config-docker
        uses: docker/login-action@v3
        with: 
          registry: ${{env.JF_RT_URL}}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Docker buildx instance
        uses: docker/setup-buildx-action@v3   # ref: https://github.com/marketplace/actions/docker-setup-buildx h
        with:
          use: true
          platforms: ${{env.DOCKER_BUILDX_PLATFORMS}} # linux/amd64,linux/arm64 # ref: https://docs.docker.com/reference/cli/docker/buildx/create/#platform
          install: true

      - name: list folder
        run: |
          pwd
          echo "OIDC_PROVIDER_NAME = ${{ vars.JF_OIDC_PROVIDER_NAME }}"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
          echo "GITHUB_SHA = $GITHUB_SHA"
          echo "GITHUB_REPOSITORY_ID = $GITHUB_REPOSITORY_ID"

          cd /home/runner/work/spring-petclinic/spring-petclinic

      - name: "MVN: prestep-summary"
        run: |
          echo "# :frog: MVN: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [$(jf --version)](https://jfrog.com/getcli/) and Java [${{ env.JAVA_PROVIDER }}](https://github.com/actions/setup-java) v${{ env.JAVA_VERSION }} " >> $GITHUB_STEP_SUMMARY
          echo "    - $(jf --version) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(mvn -v) " >> $GITHUB_STEP_SUMMARY
          echo "    - $(docker -v) " >> $GITHUB_STEP_SUMMARY
          echo " - Docker buildx configured with platforms: [${{env.DOCKER_BUILDX_PLATFORMS}}](https://docs.docker.com/reference/cli/docker/buildx/create/#platform) " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli and Docker login with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Variables info" >> $GITHUB_STEP_SUMMARY
          echo "    - ID: ${{env.BUILD_ID}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Build Name: ${{env.BUILD_NAME}} " >> $GITHUB_STEP_SUMMARY
          echo "    - Maven Repo URL: ${{env.RT_REPO_MVN_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker Repo URL: ${{env.RT_REPO_DOCKER_VIRTUAL}}" >> $GITHUB_STEP_SUMMARY
          echo "    - Docker URL: ${{env.RT_REPO_DOCKER_URL}}" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY

      - name: "Package: Create MVN Build"
        run: |     # -Djar.finalName=${{ env.JAR_FINAL_NAME}} 
          jf mvn clean install -DskipTests=true -Denforcer.skip=true --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}}

      - name: "Package: Docker build and push"
        run: |
          docker image build -f my-files/Dockerfile-cli-mvn -t ${{env.RT_REPO_DOCKER_URL}} --platform "${{env.DOCKER_BUILDX_PLATFORMS}}" --metadata-file "${{env.DOCKER_METADATA_JSON}}" --push .

      - name: "Optional: Docker pull image"
        run: |
          docker pull ${{env.RT_REPO_DOCKER_URL}}
          docker image ls

      # Build Info
          # Executive Order: 
          #       https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/
          #       https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity
          # US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
          # US Cyber Defence Agency: https://www.cisa.gov/sbom
          # NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
          # NITA: https://www.ntia.gov/page/software-bill-materials 
          # Centers for Medicare & Medicaid Services: https://security.cms.gov/learn/software-bill-materials-sbom
      - name: "BuildInfo: Collect env"
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: "BuildInfo: Add VCS info"
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: "BuildInfo: Docker build create"
        run: |
          imageDigest=$(cat "${{env.DOCKER_METADATA_JSON}}" | jq '.["containerimage.digest"]')
          echo "${imageDigest}"

          echo "${{env.RT_REPO_DOCKER_URL}}@${imageDigest}" > ${{env.DOCKER_METADATA_JSON}}

          jf rt bdc ${{env.RT_REPO_DOCKER_VIRTUAL}} --image-file ${{env.DOCKER_METADATA_JSON}} --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_ID}}

      - name: "BuildInfo: Build Publish"
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true
        
      # Evidence - Package references
      #     Docs# https://jfrog.com/help/r/jfrog-artifactory-documentation/evidence-management
      #     CLI# https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/evidence-service
      - name: "Evidence: Package"
        run: |
          echo "{ \"actor\": \"krishnamanchikalapudi\", \"date\": \"$(date '+%Y-%m-%dT%H:%M:%SZ')\", \"build_name\": \"${{ env.BUILD_NAME }}\", \"build_id\": \"${{ env.BUILD_ID}}\", \"evd\":\"Evidence-Package\", \"package\":\"${{env.RT_REPO_DOCKER_URL}}\" }" > ${VAR_EVD_PACKAGE_JSON}
          cat ./${{env.EVD_PACKAGE_JSON}}
          jf evd create --predicate ./${{env.EVD_PACKAGE_JSON}} --predicate-type https://jfrog.com/evidence/build-signature/v1 --package-name ${{env.BUILD_NAME}} --package-version ${{env.BUILD_ID}} --package-repo-name ${{env.RT_REPO_DOCKER_VIRTUAL}} --key ${{vars.KRISHNAM_JFROG_EVD_PRIVATEKEY}} --key-alias ${{vars.EVD_SIGNING_KEY}}
          echo "🔎 Evidence attached on Package: signature 🔏 "

