node {
    JF_RT_URL="https://psazuse.jfrog.io"
    JFROG_NAME="psazuse"
    
    // https://github.com/krishnamanchikalapudi/spring-petclinic
    // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli
    projectName="spring-petclinic-rbv2-pcondition" 
    JF_CLI_LOG_LEVEL='DEBUG'
    PACKAGE_CATEGORY='WebApp'
    JFROG_CLI_OUTPUT_DIR="${WORKSPACE}/cli/"
    JSON_SPEC_FNAME="${WORKSPACE}/rb2-spec-${env.BUILD_ID}.json"

    def BUILD_TS = sh(script: "date +%Y-%m-%d-%H-%M", returnStdout: true).trim()

    stage('PACKAGE') { 
        stage('init') {
             stage('jf.ver') {
                sh """ #!/bin/bash
                    jf -v
                    java -version
                    mvn -v
                """ 
            } // stage: jf.ver
            stage('jf.vars') {
                sh """ #!/bin/bash
                    export JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR="${JFROG_CLI_OUTPUT_DIR}"
                    export PACKAGE_CATEGORY="${PACKAGE_CATEGORY}"
                """ 
            } // stage: jf.ver
            stage('rt.config') {
                // jenkins secrets: https://www.jenkins.io/doc/book/using/using-credentials/
                // JFrog CLI config
                withCredentials([usernamePassword(credentialsId: 'JFROG_ARTIFACTORY_CLI', passwordVariable: 'JFROG_RT_PWD', usernameVariable: 'JFROG_RT_USER')]) {
                    sh """ #!/bin/bash
                        jf config add ${JFROG_NAME} --artifactory-url=${JF_RT_URL}/artifactory --xray-url=${JF_RT_URL}/xray --user=${JFROG_RT_USER} --password=${JFROG_RT_PWD} --interactive=false --overwrite    
                    """
                } // withCredentials: JFROG_ARTIFACTORY
            } // stage: rt.config
            stage('rt.ping') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    jf rt ping
                """
            } // stage: rt.ping
            stage('config.show') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    echo "\n"
                    jf config show
                """
            } // stage: config.show
        } // stage: init
        stage('Code') {
            stage('clone') {
                git branch: 'main', url: 'https://github.com/krishnamanchikalapudi/spring-petclinic.git'
            } // stage: clone
            stage('mvnc') {
                repoPath="krishnam-mvn"
                sh """ #!/bin/bash  
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"
                    
                    jf mvnc --server-id-resolve ${JFROG_NAME} --server-id-deploy ${JFROG_NAME} --repo-resolve-releases ${repoPath}-virtual --repo-resolve-snapshots ${repoPath}-virtual --repo-deploy-releases ${repoPath}-local --repo-deploy-snapshots ${repoPath}-dev-local
                """
            } // stage: mvnc
            stage('audit') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf audit --mvn --extended-table=true --format=simple-json
                """
            }
            stage('compile') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf mvn clean install -DskipTests=true --scan=true --build-name=${projectName} --build-number=${env.BUILD_ID} --detailed-summary=true 
                """
            } // stage: compile
            stage('scan') {
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf scan . --extended-table=true --format=simple-json
                """
            }
        } // stage: code
        stage('Tests') {
            parallel unitTest: {
                stage ("unitTest") {
                    timeout(time: 10, unit: 'MINUTES') {
                        sh """ #!/bin/bash
                            mvn test surefire-report:report

                            echo 'surefire report generated in ${env.JENKINS_URL}job/${env.JOB_NAME}/${env.BUILD_ID}/execution/node/3/ws/target/site/surefire-report.html'
                        """
                    } // timeout
                } // stage: unittest
            }, checkstyle: {
                stage ("checkStyle") {
                    timeout(time: 2, unit: 'MINUTES') {
                        sh """ #!/bin/bash
                            mvn validate
                        """
                    } // timeout
                } // stage: validate
            }, codeCoverage: {
                stage ("codeCoverage") {
                    timeout(time: 2, unit: 'MINUTES') {
                        sh """ #!/bin/bash
                            mvn jacoco:report
                                        
                            echo 'Jacoco report generated in ${env.JENKINS_URL}job/${env.JOB_NAME}/${env.BUILD_ID}/execution/node/3/ws/target/site/jacoco/index.html'
                        """
                    } // timeout
                } // stage: Jacoo
            } // parallel
        } // stage: tests
    } // stage: package
    stage('BUILD INFO') {
        // SBOM INFO: 
        //     US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
        //     US Cyber Defence Agency: https://www.cisa.gov/sbom
        //     NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1

        stage('collect env') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bce ${projectName} ${env.BUILD_ID} 
            """
        } // stage: collect env
        stage('vcs info') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bag ${projectName} ${env.BUILD_ID} 
            """
        } // stage: vcs info
        stage('build publish') {
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt bp ${projectName} ${env.BUILD_ID} --detailed-summary=true
            """
        } // stage: build publish
        stage('build scan') {
            try {
                sh """ #!/bin/bash
                    echo $JFROG_CLI_LOG_LEVEL
                    jf bs ${projectName} ${env.BUILD_ID} --rescan=true  --extended-table=true --vuln=true --fail=false
                """
            } catch (err) {
            } // TRY-CATCH
        } // stage: build scan
        stage("build Query") {
            //  echo $BP_RESP_DATA | jq -r 'buildInfo.env.PACKAGE_CATEGORY'
            sh """ #!/bin/bash
                export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                jf rt curl /api/build/${projectName}/${env.BUILD_ID} 
            """
        } // stage: build
    } // stage: Build Info
    stage('RELEASE BUNDLE v2') {
        // https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/release-lifecycle-management
        stage('spec') {
            // { "files": [ {"build": "spring-petclinic-rbv2/cmd.2024-08-30-17-01", "includeDeps": "false" } ] }
            // { "files": [ {"build": "build_name/build_number"} ] }
            script {
                def rb2info=  [
                'build' : "${projectName}/${env.BUILD_ID}",
                'includeDeps' : "false"
                ]
                def json = new groovy.json.JsonBuilder()
                json "files": [ rb2info ]
                def file = new File("${JSON_SPEC_FNAME}")
                file.write(groovy.json.JsonOutput.prettyPrint(json.toString()))
            }
            sh """ #!/bin/bash
                cat ${JSON_SPEC_FNAME}
            """
        } // stage: spec
        stage('RBv2:NEW') {
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf rbc --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --spec="${JSON_SPEC_FNAME}" --spec-vars="build_name=${projectName};build_id=${env.BUILD_ID};PACKAGE_CATEGORY=${PACKAGE_CATEGORY};state=new2dev" --server-id="${JFROG_NAME}" ${projectName} ${env.BUILD_ID}
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:NEW
        stage('RBv2:DEV') {
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --server-id="psazuse" ${projectName} ${env.BUILD_ID} DEV 
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:DEV
        stage('RBv2:PROD') {
            withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
                // NOTE: 
                sh """ #!/bin/bash
                    export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

                    jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="krishnam" --server-id="psazuse" ${projectName} ${env.BUILD_ID} PROD 
                """
             } // withCredentials: JF_ACCESS_TOKEN
        } // stage: RBv2:PROD
        

        // stage('Check State') {
        //     stage('Info') {
        //         sh """ #!/bin/bash
        //             export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

        //             jf rt curl /api/build/${projectName}/${env.BUILD_ID}?async=false -o Package_Category_${env.BUILD_ID}.json
        //         """
        //         script {
        //             def pc_json = new JsonSlurper().parseText("${WORKSPACE}/Package_Category_${env.BUILD_ID}.json")

        //             echo $pc_json

        //             def BUILDINFO_PACKAGE_CATEGORY =  "${pc_json}.buildInfo.properties.'buildInfo.env.PACKAGE_CATEGORY'"

        //             echo "BUILDINFO_PACKAGE_CATEGORY: $BUILDINFO_PACKAGE_CATEGORY"

        //         }
        //     } // stage: Info
        //     stage ('Condition: PROD or QA') {
        //         withCredentials([string(credentialsId: 'JF_ACCESS_TOKEN', variable: 'JF_ACCESS_TOKEN')]) {
        //             script {
        //                 echo " BuildInfo Package Category =  $BUILDINFO_PACKAGE_CATEGORY"
        //                 echo " Release Bundle state =  $RB2_STATUS "
        //                 export JFROG_CLI_LOG_LEVEL="${JF_CLI_LOG_LEVEL}"

        //                 if ('WEBAPP' == $BUILDINFO_PACKAGE_CATEGORY ) {   
        //                     echo " Condition TRUE"
        //                     echo "\n\n**** RBv2: Promoted to NEW --> DEV --> PROD ****\n\n"
        //                     jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="${RT_PROJECT_RB_SIGNING_KEY}" --server-id="psazuse" ${projectName} ${env.BUILD_ID} PROD
        //                 } else {
        //                     echo " Condition FALSE"
        //                     echo "\n\n**** RBv2: Promoted to NEW --> DEV --> QA ****\n\n"
        //                     jf rbp --sync="true" --access-token="${JF_ACCESS_TOKEN}" --url="${JF_RT_URL}" --signing-key="${RT_PROJECT_RB_SIGNING_KEY}" --server-id="psazuse" ${projectName} ${env.BUILD_ID} QA  
        //                 } // if
        //             } // script
                
        //         }
        //     } // stage: Condition: PROD or QA'
        // } // stage: Check state
        

    } // stage: RB v2
    stage('cleanup') {
        sh """ #!/bin/bash
            rm -rf ${JSON_SPEC_FNAME}
            rm -rf bi_packcat_*.json
            rm -rf RB2_STATUS_*.json
            rm -rf rb2-spec_*.json
        """
    }
} // node


